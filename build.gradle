allprojects {
    apply plugin: 'base'
}

subprojects {
    ext {
        praatMargins = [
                left                       : 106,
                right                      : 1814,
                top                        : 122,
                spectrogramTop             : 464,
                spectrogramUpperBandBottom : 565,
                spectrogramMiddleBandBottom: 770,
                spectrogramBottom          : 805,
                bottom                     : 1049
        ]
        praatMargins.width = praatMargins.right - praatMargins.left
    }

    repositories {
        ['cloudark', 'localhost'].each { host ->
            maven {
                url "http://$host:8081/artifactory/local"
                credentials {
                    username = findProperty('cloudarkUser')
                    password = findProperty('cloudarkApiKey')
                }
            }
        }
    }

    configurations {
        data
    }

    dependencies {
        data group: 'org.m2ci.msp.eyetracking', name: "eyetracking-multimedia-$project.name", version: '1.0-SNAPSHOT', ext: 'mkv'
        data group: 'org.m2ci.msp.eyetracking', name: "raw-data-$project.name-praat", version: '0.1.1', ext: 'zip'
        data group: 'org.m2ci.msp.eyetracking', name: "raw-data-$project.name-textgrid", version: '0.1', ext: 'zip'
        data group: 'org.m2ci.msp.eyetracking', name: "raw-data-$project.name-tobii", version: '0.1', ext: 'zip'
    }

    task unpackData(type: UnpackData) {
        destDir = layout.buildDirectory.dir('rawData')
        praatLogFile = destDir.file('praat.log')
        tobiiLogFile = destDir.file('Audio_Data_Export.tsv')
        screenCaptureFile = destDir.file('screencapture.mp4')
        audioFile = destDir.file('audio.flac')
    }

    task convertPraatLogToYaml(type: ConvertPraatLogToYaml) {
        srcFile = unpackData.praatLogFile
        destFile = layout.buildDirectory.file('data/praat.yaml')
    }

    task convertTobiiLog(type: ConvertTobiiLog) {
        srcFile = unpackData.tobiiLogFile
        destFile = layout.buildDirectory.file('data/Tobii.json')
    }

    task extractScenes(type: ExtractScenes) {
        srcFile = convertPraatLogToYaml.destFile
        destFile = layout.buildDirectory.file('data/scenes.yaml')
    }

    task generatePraatScenes(type: GeneratePraatScenes) {
        scenesFile = extractScenes.destFile
        audioFile = file("$rootDir/src/experiment/northwind_rm.flac")
        destDir = layout.buildDirectory.dir('scenes')
    }

    task generateSceneVideoSegments(type: GenerateSceneVideoSegments) {
        scenesFile = extractScenes.destFile
        inputDir = generatePraatScenes.destDir
        destDir = layout.buildDirectory.dir('sceneVideos')
        finalVideoFile = layout.buildDirectory.file('sceneMovie.mp4')
    }

    task convertScenesToSrt(type: ConvertScenesToSrt) {
        srcFile = extractScenes.destFile
        destFile = layout.buildDirectory.file('data/scenes.srt')
    }

    task mergeTobiiandPraatLogs(type: MergeLogs) {
        praatFile = extractScenes.destFile
        tobiiFile = convertTobiiLog.destFile
        destFile = layout.buildDirectory.file('data/mergedData.yaml')
    }

    task drawGazes(type: DrawGazes) {
        srcFile = generateSceneVideoSegments.finalVideoFile
        gazeFile = mergeTobiiandPraatLogs.destFile
        fixSymbol = file("$rootDir/src/images/red_circle.png")
        destFile = layout.buildDirectory.file('data/gazeVideo.mp4')
    }

    task findOffsets(type: FindOffsets) {
        praatlog = unpackData.praatLogFile
        tobiilog = unpackData.tobiiLogFile
    }

    task muxStreams(type: MuxStreams) {
        gazeVideoFile = drawGazes.destFile
        screenCaptureFile = unpackData.screenCaptureFile
        audioFile = unpackData.audioFile
        subtitleFile = convertScenesToSrt.destFile
        destFile = layout.buildDirectory.file("data/${project.name}.mkv")
    }

    artifacts {
        'default' muxStreams.destFile, {
            builtBy muxStreams
        }
    }
}

task assembleData(type: AssembleData) {
    srcFiles = files(subprojects.collect { it.mergeTobiiandPraatLogs.destFile })
    destFile = layout.buildDirectory.file("${project.name}.yaml")
}

task packageData(type: Zip) {
    from assembleData
}

artifacts {
    'default' packageData
}
